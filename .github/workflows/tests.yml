name: Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12]

    services:
      postgres:
        image: postgres:16.2
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7.2.4
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements.dev.txt ]; then pip install -r requirements.dev.txt; fi
        pip install pytest pytest-django pytest-cov coverage
    
    - name: Create .env file
      run: |
        cp .env.example .env
        echo "SECRET_KEY=django-insecure-test-key" >> .env
        echo "DEBUG=False" >> .env
        echo "ALLOWED_HOSTS=.localhost,127.0.0.1" >> .env

    - name: Setup test database settings - Part 1
      run: |
        mkdir -p education/settings/
        echo "from education.settings.base import *" > education/settings/ci.py
        echo "" >> education/settings/ci.py
        echo "DATABASES = {" >> education/settings/ci.py
        echo "    'default': {" >> education/settings/ci.py
        echo "        'ENGINE': 'django.db.backends.postgresql'," >> education/settings/ci.py
        echo "        'NAME': 'postgres'," >> education/settings/ci.py
        echo "        'USER': 'postgres'," >> education/settings/ci.py
        echo "        'PASSWORD': 'postgres'," >> education/settings/ci.py
        echo "        'HOST': 'localhost'," >> education/settings/ci.py
        echo "        'PORT': '5432'," >> education/settings/ci.py
        echo "    }" >> education/settings/ci.py
        echo "}" >> education/settings/ci.py
        echo "" >> education/settings/ci.py

    - name: Setup test database settings - Part 2
      run: |
        echo "PASSWORD_HASHERS = ['django.contrib.auth.hashers.MD5PasswordHasher']" >> education/settings/ci.py
        echo "" >> education/settings/ci.py
        echo "DEBUG = False" >> education/settings/ci.py
        echo "" >> education/settings/ci.py
        echo "CACHES = {" >> education/settings/ci.py
        echo "    'default': {" >> education/settings/ci.py
        echo "        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache'," >> education/settings/ci.py
        echo "    }" >> education/settings/ci.py
        echo "}" >> education/settings/ci.py

    - name: Setup test database settings - Part 3
      run: |
        echo "CHANNEL_LAYERS = {" >> education/settings/ci.py
        echo "    'default': {" >> education/settings/ci.py
        echo "        'BACKEND': 'channels.layers.InMemoryChannelLayer'," >> education/settings/ci.py
        echo "    }" >> education/settings/ci.py
        echo "}" >> education/settings/ci.py
        echo "" >> education/settings/ci.py
        echo "LOGGING = {" >> education/settings/ci.py
        echo "    'version': 1," >> education/settings/ci.py
        echo "    'disable_existing_loggers': True," >> education/settings/ci.py
        echo "}" >> education/settings/ci.py

    - name: Run Django tests
      run: |
        python manage.py test --settings=education.settings.ci
      
    - name: Run pytest
      run: |
        python -m pytest --ds=education.settings.ci
    
    - name: Run tests with coverage
      run: |
        coverage run --source=courses,students,chat manage.py test --settings=education.settings.ci
        coverage xml
        coverage report
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false 